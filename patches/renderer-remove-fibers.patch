diff --git a/core/lib/Drupal/Core/Render/Renderer.php b/core/lib/Drupal/Core/Render/Renderer.php
index 3774cb2272..e2ab5ad075 100644
--- a/core/lib/Drupal/Core/Render/Renderer.php
+++ b/core/lib/Drupal/Core/Render/Renderer.php
@@ -179,11 +179,26 @@ protected function doReplacePlaceholder(string $placeholder, string|MarkupInterf
    */
   public function renderPlaceholder($placeholder, array $elements) {
     // Get the render array for the given placeholder
-    $placeholder_element = $elements['#attached']['placeholders'][$placeholder];
-    $markup = $this->doRenderPlaceholder($placeholder_element);
-    return $this->doReplacePlaceholder($placeholder, $markup, $elements, $placeholder_element);
+    $placeholder_elements = $elements['#attached']['placeholders'][$placeholder];
+
+    // Prevent the render array from being auto-placeholdered again.
+    $placeholder_elements['#create_placeholder'] = FALSE;
+
+    // Render the placeholder into markup.
+    $markup = $this->renderInIsolation($placeholder_elements);
+
+    // Replace the placeholder with its rendered markup, and merge its
+    // bubbleable metadata with the main elements'.
+    $elements['#markup'] = Markup::create(str_replace($placeholder, $markup, $elements['#markup']));
+    $elements = $this->mergeBubbleableMetadata($elements, $placeholder_elements);
+
+    // Remove the placeholder that we've just rendered.
+    unset($elements['#attached']['placeholders'][$placeholder]);
+
+    return $elements;
   }
 
+
   /**
    * {@inheritdoc}
    */
@@ -642,7 +657,7 @@ protected function setCurrentRenderContext(RenderContext $context = NULL) {
    *   bubbleable metadata associated with the markup that replaced the
    *   placeholders.
    *
-   * @return bool
+   * @returns bool
    *   Whether placeholders were replaced.
    *
    * @see \Drupal\Core\Render\Renderer::renderPlaceholder()
@@ -667,47 +682,13 @@ protected function replacePlaceholders(array &$elements) {
 
     // First render all placeholders except 'status messages' placeholders.
     $message_placeholders = [];
-    $fibers = [];
     foreach ($elements['#attached']['placeholders'] as $placeholder => $placeholder_element) {
       if (isset($placeholder_element['#lazy_builder']) && $placeholder_element['#lazy_builder'][0] === 'Drupal\Core\Render\Element\StatusMessages::renderMessages') {
         $message_placeholders[] = $placeholder;
       }
       else {
-        // Get the render array for the given placeholder
-        $fibers[$placeholder] = new \Fiber(function () use ($placeholder_element) {
-          return [$this->doRenderPlaceholder($placeholder_element), $placeholder_element];
-        });
-      }
-    }
-    $iterations = 0;
-    while (count($fibers) > 0) {
-      foreach ($fibers as $placeholder => $fiber) {
-        if (!$fiber->isStarted()) {
-          $fiber->start();
-        }
-        elseif ($fiber->isSuspended()) {
-          $fiber->resume();
-        }
-        // If the Fiber hasn't terminated by this point, move onto the next
-        // placeholder, we'll resume this fiber again when we get back here.
-        if (!$fiber->isTerminated()) {
-          // If we've gone through the placeholders once already, and they're
-          // still not finished, then start to allow code higher up the stack to
-          // get on with something else.
-          if ($iterations) {
-            $fiber = \Fiber::getCurrent();
-            if ($fiber !== NULL) {
-              $fiber->suspend();
-            }
-          }
-          continue;
-        }
-        [$markup, $placeholder_element] = $fiber->getReturn();
-
-        $elements = $this->doReplacePlaceholder($placeholder, $markup, $elements, $placeholder_element);
-        unset($fibers[$placeholder]);
+        $elements = $this->renderPlaceholder($placeholder, $elements);
       }
-      $iterations++;
     }
 
     // Then render 'status messages' placeholders.
